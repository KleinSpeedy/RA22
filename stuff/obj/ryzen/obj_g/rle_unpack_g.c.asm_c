
./stuff/obj/ryzen/obj_g/rle_unpack.c.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <rle_unpack>:
#include "rle_unpack.h"

char* rle_unpack(char* str)
{   
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    short esc = 0;
   8:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
    int size = 0;
   e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
    int comp_size = 0;
  15:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    char first;
    short count;

    for (int i = 0; esc < 2; i++)
  1c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  23:	eb 64                	jmp    89 <rle_unpack+0x89>
    {
        if (str[i] == '\0' && esc == 0) 
  25:	8b 45 fc             	mov    -0x4(%rbp),%eax
  28:	48 63 d0             	movslq %eax,%rdx
  2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2f:	48 01 d0             	add    %rdx,%rax
  32:	0f b6 00             	movzbl (%rax),%eax
  35:	84 c0                	test   %al,%al
  37:	75 1d                	jne    56 <rle_unpack+0x56>
  39:	66 83 7d ee 00       	cmpw   $0x0,-0x12(%rbp)
  3e:	75 16                	jne    56 <rle_unpack+0x56>
        {
            esc++;
  40:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  44:	83 c0 01             	add    $0x1,%eax
  47:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
            comp_size = i - 1;
  4b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  4e:	83 e8 01             	sub    $0x1,%eax
  51:	89 45 f8             	mov    %eax,-0x8(%rbp)
  54:	eb 2f                	jmp    85 <rle_unpack+0x85>
        }
        else if ( str[i] == '\0' && esc == 1)
  56:	8b 45 fc             	mov    -0x4(%rbp),%eax
  59:	48 63 d0             	movslq %eax,%rdx
  5c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  60:	48 01 d0             	add    %rdx,%rax
  63:	0f b6 00             	movzbl (%rax),%eax
  66:	84 c0                	test   %al,%al
  68:	75 1b                	jne    85 <rle_unpack+0x85>
  6a:	66 83 7d ee 01       	cmpw   $0x1,-0x12(%rbp)
  6f:	75 14                	jne    85 <rle_unpack+0x85>
        {
            esc++;
  71:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  75:	83 c0 01             	add    $0x1,%eax
  78:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
            size = i - 1;
  7c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  7f:	83 e8 01             	sub    $0x1,%eax
  82:	89 45 f4             	mov    %eax,-0xc(%rbp)
    for (int i = 0; esc < 2; i++)
  85:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  89:	66 83 7d ee 01       	cmpw   $0x1,-0x12(%rbp)
  8e:	7e 95                	jle    25 <rle_unpack+0x25>
        }
    }
    first = str[comp_size];
  90:	8b 45 f8             	mov    -0x8(%rbp),%eax
  93:	48 63 d0             	movslq %eax,%rdx
  96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9a:	48 01 d0             	add    %rdx,%rax
  9d:	0f b6 00             	movzbl (%rax),%eax
  a0:	88 45 ed             	mov    %al,-0x13(%rbp)
    
     
    while (size > 0)
  a3:	eb 63                	jmp    108 <rle_unpack+0x108>
    {
        comp_size--;
  a5:	83 6d f8 01          	subl   $0x1,-0x8(%rbp)
        count = str[comp_size];
  a9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  ac:	48 63 d0             	movslq %eax,%rdx
  af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b3:	48 01 d0             	add    %rdx,%rax
  b6:	0f b6 00             	movzbl (%rax),%eax
  b9:	66 98                	cbtw   
  bb:	66 89 45 f2          	mov    %ax,-0xe(%rbp)
        for (short i = 0; i < (count - '0'); i++)
  bf:	66 c7 45 f0 00 00    	movw   $0x0,-0x10(%rbp)
  c5:	eb 22                	jmp    e9 <rle_unpack+0xe9>
        {
            str[size] = first;
  c7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  ca:	48 63 d0             	movslq %eax,%rdx
  cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d1:	48 01 c2             	add    %rax,%rdx
  d4:	0f b6 45 ed          	movzbl -0x13(%rbp),%eax
  d8:	88 02                	mov    %al,(%rdx)
            size--;
  da:	83 6d f4 01          	subl   $0x1,-0xc(%rbp)
        for (short i = 0; i < (count - '0'); i++)
  de:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  e2:	83 c0 01             	add    $0x1,%eax
  e5:	66 89 45 f0          	mov    %ax,-0x10(%rbp)
  e9:	0f bf 55 f0          	movswl -0x10(%rbp),%edx
  ed:	0f bf 45 f2          	movswl -0xe(%rbp),%eax
  f1:	83 e8 30             	sub    $0x30,%eax
  f4:	39 c2                	cmp    %eax,%edx
  f6:	7c cf                	jl     c7 <rle_unpack+0xc7>
        }
        if (first == '1') first = '0';
  f8:	80 7d ed 31          	cmpb   $0x31,-0x13(%rbp)
  fc:	75 06                	jne    104 <rle_unpack+0x104>
  fe:	c6 45 ed 30          	movb   $0x30,-0x13(%rbp)
 102:	eb 04                	jmp    108 <rle_unpack+0x108>
        else first = '1';
 104:	c6 45 ed 31          	movb   $0x31,-0x13(%rbp)
    while (size > 0)
 108:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
 10c:	7f 97                	jg     a5 <rle_unpack+0xa5>
    }

    return str;
 10e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
}
 112:	5d                   	pop    %rbp
 113:	c3                   	ret    
